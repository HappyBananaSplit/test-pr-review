# "Low code" Review agent
# Looks a pull request and issues "comprehensive" feedback
# Not as full featured as the claude code actions example since it's all inlined in the config
# Required env vars:
#  - ANTHROPIC_API_KEY (for claude)
#  - GH_TOKEN (for CLI)
# Areas to improve:
#  - Specialized prompts instead of generic review
#  - GitLab/BitBucket support
#  - Not using inline PR comments super effectively.
version: 2.1

jobs:
  review-agent:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Configure MCP servers
          command: |
            cat > /tmp/review_mcp_config.json  \<< EOF
            {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "-e",
                    "GITHUB_HOST",
                    "ghcr.io/github/github-mcp-server:sha-efef8ae"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GH_TOKEN}",
                    "GITHUB_HOST": "${GITHUB_HOST}"
                  }
                }
                }
              }
            EOF
      - run:
          name: Install gh cli
          command: |
            sudo apt update
            sudo apt install -y gh
      - run:
          name: Install Claude Code
          command: |
            npm install -g @anthropic-ai/claude-code
      - run: 
          name: Run Agent
          command: |
            claude --mcp-config /tmp/review_mcp_config.json \
            --allowed-tools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*)" \
            --output-format json \
            -p "REPO: <<pipeline.event.github.repository.owner.login>>/<<pipeline.event.github.repository.name>>
              PR NUMBER: <<pipeline.event.github.pull_request.number>>
              Perform a comprehensive code review with the following focus areas:
              1. **Code Quality**
                - Clean code principles and best practices
                - Proper error handling and edge cases
                - Code readability and maintainability
              2. **Security**
                - Check for potential security vulnerabilities
                - Validate input sanitization
                - Review authentication/authorization logic
              3. **Performance**
                - Identify potential performance bottlenecks
                - Review database queries for efficiency
                - Check for memory leaks or resource issues
              4. **Testing**
                - Verify adequate test coverage
                - Review test quality and edge cases
                - Check for missing test scenarios
              5. **Documentation**
                - Ensure code is properly documented
                - Verify README updates for new features
                - Check API documentation accuracy
              Provide detailed feedback using inline comments for specific issues.
              Use top-level comments for general observations or praise."
workflows:
  review-agent:
    jobs:
      - review-agent:
          context:
            - review-agent
